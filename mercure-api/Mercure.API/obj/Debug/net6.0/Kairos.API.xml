<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kairos.API</name>
    </assembly>
    <members>
        <member name="M:Kairos.API.Controllers.Authentification.LoginMicrosoft">
            <summary>
            Permet de se connecter à l'applicaation
            </summary>
            <returns>La redirection sur le système d'authentification de Microsoft</returns>
        </member>
        <member name="M:Kairos.API.Controllers.Authentification.LoginGoogle">
            <summary>
            Permet de se connecter à l'applicaation
            </summary>
            <returns>La redirection sur le système d'authentification de Google (ou le service choisie)</returns>
        </member>
        <member name="M:Kairos.API.Controllers.Authentification.CallBackMicrosoft(System.String,System.String,System.String,System.String)">
            <summary>
            Reçois la requête de microsoft pour la connexion
            </summary>
            <param name="code">Le code de microsoft concernant la connexion</param>
            <param name="state">Le code qu'on à générer qui permet de protéger contre les Man In The Middle</param>
            <param name="error">Le code erreur s'il y en a une</param>
            <param name="errorDescription">La description de l'erreur</param>
            <response code="200">Returns the token information</response>
            <response code="404">Can't found your account</response>
            <response code="401">You are not authorize</response>
            <response code="400">Microsoft can't find your account, please contact the owner of the application</response>
            <returns></returns>
        </member>
        <member name="M:Kairos.API.Controllers.Authentification.CallBackGoogle(System.String,System.String,System.String)">
            <summary>
            Reçois la requête de google pour la connexion
            </summary>
            <param name="code">Le code de microsoft concernant la connexion</param>
            <param name="state">Le code qu'on à générer qui permet de protéger contre les Man In The Middle</param>
            <param name="error">Le code erreur s'il y en a une</param>
            <param name="errorDescription">La description de l'erreur</param>
            <response code="200">Returns the token information</response>
            <response code="404">Can't found your account</response>
            <response code="401">You are not authorize</response>
            <response code="400">Google can't find your account, please contact the owner of the application</response>
            <returns></returns>
        </member>
        <member name="M:Kairos.API.Controllers.EventController.GetEvents">
            <summary>
            Permet de récupérer la liste des événements
            </summary>
        </member>
        <member name="M:Kairos.API.Controllers.EventController.GetEventFromGroupId(System.String)">
            <summary>
            On retourne les événements d'un groupe en particulier
            </summary>
            <param name="groupId">L'id d'un groupe</param>
        </member>
        <member name="M:Kairos.API.Controllers.EventController.DeleteEvent(System.String)">
            <summary>
            Mettre à jour un événement
            </summary>
            <param name="eventId">L'id de l'événement</param>
        </member>
        <member name="M:Kairos.API.Controllers.EventController.CreateEvent(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Créer un événement
            </summary>
            <param name="groupId">L'id de l'événement</param>
            <param name="title">Le titre du l'événement</param>
            <param name="description">La description de l'événement</param>
            <param name="labels">Les labels utilisé pour l'événement</param>
            <param name="sessionDate">La date de session de l'événement</param>
        </member>
        <member name="M:Kairos.API.Controllers.EventController.UpdateEvent(System.String,System.String,System.String,System.String)">
            <summary>
            Met à jour un événement
            </summary>
            <param name="eventId">L'id de l'événement</param>
            <param name="title">Le titre de l'événement</param>
            <param name="description">Description de l'événement</param>
            <param name="labels">Les labels à remettre à jour</param>
            <returns></returns>
        </member>
        <member name="M:Kairos.API.Controllers.GroupController.GetGroups">
            <summary>
            Récupère la liste des groupes de l'utilisateur
            </summary>
        </member>
        <member name="M:Kairos.API.Controllers.GroupController.GetPrivateGroup">
            <summary>
            Récupère les groupes dont l'utilisateur est propriétaire
            </summary>
            <returns>the personal groups</returns>
        </member>
        <member name="M:Kairos.API.Controllers.GroupController.CreateGroup(System.String)">
            <summary>
            Création d'un groupe
            </summary>
            <param name="groupName">le nom du groupe</param>
        </member>
        <member name="M:Kairos.API.Controllers.GroupController.DeleteGroup(System.String)">
            <summary>
            Suppression d'un groupe
            </summary>
            <param name="groupId">L'id du groupe</param>
        </member>
        <member name="M:Kairos.API.Controllers.LabelController.GetLabels">
            <summary>
            Récupère la liste des labels de l'utilisateur connecté
            </summary>
            <returns>all the labels</returns>
        </member>
        <member name="M:Kairos.API.Controllers.LabelController.GetEventLabel(System.String)">
            <summary>
            Récupère les labels d'un événement
            </summary>
            <param name="eventId">L'id de l'événement</param>
        </member>
        <member name="M:Kairos.API.Controllers.LabelController.DeleteLabel(System.String)">
            <summary>
            Suppression d'un label
            </summary>
            <param name="labelId">l'id du label</param>
        </member>
        <member name="M:Kairos.API.Controllers.LabelController.UpdateLabel(System.String,System.String)">
            <summary>
            Modification d'un label
            </summary>
            <param name="labelId">L'id du label</param>
            <param name="labelName">Le nom du label</param>
        </member>
        <member name="M:Kairos.API.Controllers.LabelController.GetGroupLabel(System.String)">
            <summary>
            Récupération des labels d'un groupe
            </summary>
            <param name="groupId">L'id du groupe</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Kairos.API.Controllers.LabelController.CreateLabel(System.String)" -->
        <member name="M:Kairos.API.Controllers.StudiesController.StartStudies(System.String,System.String)">
            <summary>
            Permet de commencer une session de travail
            </summary>
        </member>
        <member name="M:Kairos.API.Controllers.StudiesController.StopStudies">
            <summary>
            Permet d'arrêter une session de travail
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kairos.API.Controllers.StudiesController.HeartBeat">
            <summary>
            Envoie un battement de coeur pour informer que la session est toujours active
            </summary>
        </member>
        <member name="M:Kairos.API.Controllers.StudiesController.GetStudies(System.String)">
            <summary>
            On retourne une session de travail si elle existe dans le cache
            </summary>
            <param name="studiesId">L'id de la session de travail</param>
            <returns></returns>
        </member>
        <member name="M:Kairos.API.Controllers.StudiesController.LastWeekWork">
            <summary>
            On retourne les heures de travail d'un utilisateur par jour.
            </summary>
        </member>
        <member name="M:Kairos.API.Controllers.StudiesController.LastWeekHoursPerLabel">
            <summary>
            Retourne les heures de travail par label de l'utilisateur
            </summary>
        </member>
        <member name="M:Kairos.API.Controllers.StudiesController.LastWeekRate">
            <summary>
            Retourne le taux de travail de l'utilisateur comparé à la moyenne de la semaine dernière
            </summary>
        </member>
        <member name="M:Kairos.API.Controllers.StudiesController.GetPersonalGroup">
            <summary>
            On récupère le groupe personnel de l'utilisateur
            </summary>
            <returns>On retourne l'id du groupe personnel</returns>
        </member>
        <member name="M:Kairos.API.Controllers.UserController.GetMe">
            <summary>
            Retourne les informations de l'utilisateur s'il est connecté
            </summary>
            <response code="200">Retourne les informations de l'utilisateur</response>
            <response code="403">Si aucun utilisateur n'est connecté on retourne une erreur</response>   
            <returns>Retourne l'utilisateur connecté</returns>
        </member>
        <member name="M:Kairos.API.Startup.CreateSeed(System.IServiceProvider,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Lorsque l'environement est en DEV, il crée un utilisateur de dev avec des données.
            </summary>
            <param name="serviceProvider"></param>
            <param name="env"></param>
        </member>
        <member name="M:Kairos.API.Utils.CryptoUtils.Encrypt(System.String)">
            <summary>
            Chiffre la valeur en paramètre
            </summary>
            <param name="toBeEncrypted">la valeur à chiffrer</param>
            <returns>la valeur chiffré</returns>
        </member>
        <member name="M:Kairos.API.Utils.CryptoUtils.Decrypt(System.String)">
            <summary>
            Dé-chiffrer la valeur en paramètre
            </summary>
            <param name="encrypted">la valeur dé-chiffrer</param>
            <returns>la valeur dé-chiffrer</returns>
        </member>
        <member name="M:Kairos.API.Utils.Google.GoogleClient.GetUserAsync">
            <summary>
            On fait la requête à l'API Google pour récupérer les informations de l'utilisateur
            </summary>
            <returns>L'utilisateur Google connecté</returns>
        </member>
        <member name="P:Kairos.API.Utils.Google.Models.Json.ExtraJson">
            <summary>
            Extra data for/from the JSON serializer/deserializer to included with the object model.
            </summary>
        </member>
        <member name="M:Kairos.API.Utils.Google.OAuth2Google.OAuthHelper.GetAuthorizeUrl(Kairos.API.Utils.Google.OAuth2Google.AuthorizeOptions)">
            <summary>
            On crée une url pour rediriger l'utilisateur vers la page de connexion de Google
            </summary>
            <param name="opts">Les options de connexion</param>
            <returns>l'url</returns>
        </member>
        <member name="M:Kairos.API.Utils.Google.OAuth2Google.OAuthHelper.GetAccessTokenAsync(System.String,System.String,System.String,System.String)">
            <summary>
            On récupère le token d'accès à partir du code de connexion
            </summary>
            <param name="code">Code reçu après la connexion</param>
            <param name="clientId">Le clientId de notre application</param>
            <param name="clientSecret">Le clientSecret de notre application</param>
            <param name="redirectUri">Où souhaite le rediriger</param>
        </member>
        <member name="M:Kairos.API.Utils.JwtUtils.Encrypt(System.String)">
            <summary>
            Chiffre le texte en paramètre
            </summary>
            <param name="toBeEncrypted">texte à faire chiffrer</param>
            <returns>le texte chiffré</returns>
        </member>
        <member name="M:Kairos.API.Utils.JwtUtils.Decrypt(System.String)">
            <summary>
            Dé-chiffre le texte en pramètre
            </summary>
            <param name="encrypted">texte à faire dé-chiffrer</param>
            <returns>le texte déchiffré</returns>
        </member>
        <member name="M:Kairos.API.Utils.JwtUtils.GenerateJsonWebToken(Kairos.API.Models.User)">
            <summary>
            Genère le JWT
            </summary>
            <param name="user">l'utilisateur concerné</param>
            <param name="logUser">les informations de connexion</param>
            <returns>le jwt chiffré</returns>
        </member>
        <member name="M:Kairos.API.Utils.JwtUtils.ValidateCurrentToken(System.String)">
            <summary>
            Permet de validé le jwt donné
            </summary>
            <param name="token">le token</param>
            <returns>le user id et son log id, qui permet d'avoir l'id de l'utilisateur et l'id de sa connexion</returns>
        </member>
        <member name="M:Kairos.API.Utils.Microsoft.MicrosoftClient.GetUserAsync">
            <summary>
            On fait une requête à l'API Microsoft pour récupérer les informations de l'utilisateur
            </summary>
            <returns>L'utilisateur Microsoft conneté</returns>
        </member>
        <member name="P:Kairos.API.Utils.Microsoft.Models.Json.ExtraJson">
            <summary>
            Extra data for/from the JSON serializer/deserializer to included with the object model.
            </summary>
        </member>
        <member name="M:Kairos.API.Utils.Microsoft.OAuth2Microsoft.OAuthHelper.GetAuthorizeUrl(Kairos.API.Utils.Microsoft.OAuth2Microsoft.AuthorizeOptions)">
            <summary>
            On crée une url pour rediriger l'utilisateur vers la page de connexion de Microsoft
            </summary>
            <param name="opts">Les options de </param>
        </member>
        <member name="M:Kairos.API.Utils.Microsoft.OAuth2Microsoft.OAuthHelper.GetAccessTokenAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            On récupère le token d'accès à partir du code de connexion
            </summary>
            <param name="code">Code reçu après la connexion</param>
            <param name="clientId">Le clientId de notre application</param>
            <param name="clientSecret">Le clientSecret de notre application</param>
            <param name="tenantId">L'id de notre application micrcosoft</param>
            <param name="redirectUri">Où souhaite le rediriger</param>
        </member>
    </members>
</doc>
