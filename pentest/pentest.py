import json
import time
import requests

start_pentest = time.perf_counter()

swagger_url = "http://localhost:5000/swagger/v1/swagger.json"

url_token_roles = "http://localhost:5000/dev/test-roles"

request_token = requests.get(url_token_roles)
data_tokens = request_token.json()

# Print ALL Roles
print(f"All Roles detected ({len(data_tokens)}):")
for role in data_tokens:
    print(role['roleName'])

# Pentest
print("\nPentest: \n")

get_all_url_swagger = requests.get(swagger_url)
data_swagger = get_all_url_swagger.json()

# Save all paths from swagger
paths = []
for path in data_swagger['paths']:
    paths.append({
        'path': path,
        'method': list(data_swagger['paths'][path].keys())[0]
    })

# Print all paths
print(f"All Paths detected ({len(paths)}) : ")

# Save all resulsts
results = {}

with open("./pentest/result.txt", "w", encoding="utf-8") as f:
    f.write("Pentest script developed by Mercure to test the API\n\n")

    # Test all paths
    for path in paths:
        print(f"\nTesting Path: {path['path']} with Method: {path['method']}")

        f.write("\nTesting Path: " + path['path'])

        results[path['path']] = {
            'method': path['method'],
            'result': []
        }

        for token in data_tokens:
            print("\t Role role testing: " + token['roleName'])
            f.write("\nRole role testing: " + token['roleName'] + "\n")
            headers = {
                'Authorization': token['token']
            }

            start_request = time.perf_counter()

            if path['method'] == 'get':
                res = requests.get("http://localhost:5000" +
                                   path['path'], headers=headers)
            elif path['method'] == 'post':
                res = requests.post("http://localhost:5000" +
                                    path['path'], headers=headers)
            elif path['method'] == 'put':
                res = requests.put("http://localhost:5000" +
                                   path['path'], headers=headers)
            elif path['method'] == 'delete':
                res = requests.delete(
                    "http://localhost:5000" + path['path'], headers=headers)
            else:
                print("Method not supported")

            request_time = time.perf_counter() - start_request

            results[path['path']]['result'].append({
                'roleName': token['roleName'],
                'response_code': res.status_code,
                'response_time': request_time * 1000
            })

            print("\t\t Response code : " + str(res.status_code))
            print("\t\t Response time :  {0:.0f}ms".format(
                request_time * 1000))
            print("\t\t Can access : " + ("游릴" if res.status_code == 200 else "游린"))

            f.write("\t\t Response code : " + str(res.status_code) + "\n")
            f.write("\t\t Response time :  {0:.0f}ms".format(
                request_time * 1000) + "\n")
            f.write("\t\t Can access : " +
                    ("游릴" if res.status_code == 200 else "游린") + "\n")

    end_pentest = time.perf_counter() - start_pentest
    print("\n\nPentest finished in {0:.0f}ms".format(end_pentest * 1000))
    f.write("\n\nPentest finished in {0:.0f}ms".format(end_pentest * 1000))

    # Close file
    f.close()

# save results in a json file
with open("./pentest/results.json", "w", encoding="utf-8") as f:
    f.write(json.dumps(results, indent=4))
    f.close()

# Print les r칠sultats dans un tableau lisible
print("Generating markdown file")

with open("./pentest/RESULT_PENTEST.md", "w", encoding="utf-8") as f:
    f.write("# Pentest script developed by Mercure to test the API\n\n")

    f.write("|Path | " + " | ".join([token['roleName']
                                     for token in data_tokens]) + "|\n")
    f.write("|---|" + "---|" * len(data_tokens) + "\n")
    for result in results:
        f.write("|"+result + " | " + " | ".join(["<table><thead><tr><th>W</th><th>R</th></tr></thead><tbody><tr><td>" + ("游릴" if res['response_code'] == 200 and results[result]['method'] == "post" else "游린") +
                                                 "</td><td>" + ("游릴" if res['response_code'] ==
                                                                200 and results[result]['method'] == "get" else "游린") + "</td></tr></tbody></table>" for res in results[result]['result']]) + "|\n")

    f.close()
