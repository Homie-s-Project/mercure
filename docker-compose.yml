version: '3.7'

services:
  mercure-db:
    image: postgres:latest
    container_name: mercure-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mercure
      - POSTGRES_USER=mercure_user
      - POSTGRES_PASSWORD=mercure_password
    volumes:
      - pgdata:/var/lib/postgresql/data
      - pgconf:/etc/postgresql
      - pglog:/var/log/postgresql
    networks:
      - postgres-prometheus

  mercure-cache:
    container_name: mercure-cache
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - cache:/data

  mercure-pgadmin:
    image: dpage/pgadmin4
    container_name: mercure-pgadmin4
    restart: always
    depends_on:
      - mercure-db
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@mercure.com
      PGADMIN_DEFAULT_PASSWORD: mercure
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  mercure-api:
    image: mercure-api:prod
    container_name: mercure-api
    depends_on:
      - mercure-db
      - mercure-cache
    build:
      context: mercure-api
      dockerfile: ./Dockerfile
    ports:
      - 5000:5000
    environment:
      - DOTNET_WATCH_RESTART_ON_RUDE_EDIT=1
      - DOTNET_WATCH_SUPPRESS_EMOJIS=1  
      - ASPNETCORE_ENVIRONMENT=Production
      - RUN_IN_DOCKER=true
    volumes:
      - ./mercure-api:/app
    command:  dotnet run --project mercure.API
      
  mercure-web:
    image: mercure-web:prod
    container_name: mercure-web
    restart: unless-stopped
    build:
      context: mercure-web
      dockerfile: ./prod.Dockerfile
    environment:
      NODE_ENV: production
    volumes:
      - ./mercure-web:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 4200:4200

  mercure-grafana:
      container_name: mercure-grafana
      restart: unless-stopped
      depends_on: 
        - mercure-prometheus
        - mercure-cache
        - mercure-postgres-exporter
      build:
        context: mercure-grafana
        dockerfile: ./Dockerfile
      ports:
        - 30091:3000
      environment:
        - GF_DEFAULT_INSTANCE_NAME=mercure-dashboard
        - GF_SECURITY_ADMIN_USER=mercure
        - GF_SECURITY_ADMIN_PASSWORD=mercure_password
        - GF_AUTH_ANONYMOUS_ENABLED=true
        - GF_INSTALL_PLUGINS=redis-datasource
      volumes:
        - grafana-storage:/var/lib/grafana

  mercure-prometheus:
    image: ubuntu/prometheus
    container_name: mercure-prometheus
    restart: unless-stopped
    ports:
      - "30090:9090"
    environment:
      - TZ=UTC+2
    volumes:
      - ./mercure-grafana/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    
  mercure-postgres-exporter:
    image: wrouesnel/postgres_exporter:latest
    container_name: mercure-postgres-exporter
    restart: unless-stopped
    depends_on:
      - mercure-db
      - mercure-prometheus
    ports:
      - 9187:9187
    environment:
      - DATA_SOURCE_NAME=postgresql://mercure_user:mercure_password@host.docker.internal:5432/postgres?sslmode=disable
      - DATA_SOURCE_USER=mercure_user
      - DATA_SOURCE_PASS=mercure_password
    networks:
      - postgres-prometheus

volumes:
  pgdata:
  pgconf:
  pglog:
  pgadmin-data:
  cache:
      driver: local
  grafana-storage:
      driver: local

networks:
  postgres-prometheus:
